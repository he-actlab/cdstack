spring read_data(output float x1[n],output float x2[n], parameter string path, parameter string type='csv')
{
   iterator i[0:n-1];
   iterator j[n:n+n-1];

   lines = fread(path, type);
   x1[i] = float(lines[i]);
   x2[i]= float(lines[j]);

}
component train_recommender(input int x1[m], input int x2[n], state float w1[m][k], state float w2[n][k], parameter float mu=1.0)
{

   iterator i[0:m-2];
   iterator j[0:n-2];
   iterator l[0:k-1];

    i1 = x1[m-1];
    i2 = x2[n-1];

   h1[j] = sum[l](w1[i1] * w2[j][l]);
   h2[i] = sum[l](w1[i][l] * w2[i2]);


   d1[j] = h1[j] - x1[j];
   d2[i] = h2[i] - x2[i];

   g1[i][l] = d2[i] * w2[i2];
   g2[j][l] = d2[j] * w1[i1];

   w1[i][l] = w1[i][l] - g1[i][l];
   w2[j][l] = w2[j][l] - g2[j][l];

}

reservoir store_data(input float centroids[n][m], parameter string path, parameter string type='csv')
{
   fwrite(centroids, path, type);
}

component main()
{
   flow float w1[3][2], w2[3][2];
   flow int x1[4], x2[4];


   iterator i[0:2];
   iterator j[0:1];

   iterations = 100;

   w1[i][j] = 0;
   w2[i][j] = 0;


   for (i=0; i<iterations; i=i+1)
   {
       read_data(x1, x2, 'data/train.csv');
       train_recommender(x1, x2, w1, w2);
   }

   store_data(centroids, 'data/model.csv');

}
