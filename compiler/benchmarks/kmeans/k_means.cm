spring read_data(output float x[n][m], parameter string path, parameter string type='csv')
{
    iterator i[0:n-1];
    iterator j[0:m-1];

    lines = fread(path1, type);
    x[i][j] = float(lines[i][j]);

}
component initialize_centroids(input float x[n][m],output float centroids[k][l], parameter int centers=10)
{
    iterator i[0:centers-1];
    iterator j[0:m-1];

    // Assign centroids as the first 10 values in the dataset
    centroids[i][j] = x[i][j];

}
component train_kmeans(output int clusters[n], input float x[n][m], state float centroids[centers][m], parameter int centers=10)
{
    iterator i[0:n-1];
    iterator j[0:centers-1];
    iterator k[0:m-1];


    distances[i][j] = sum[k]((x[i][k] - centroids[j][k])^2.0)^(0.5);
    clusters[i] = argmin[j](distances[i][j]);

    centroids[j][k] = sum[i]((j==clusters[i])*x[i][k]);
    centroids[j][k] = centroids[j][k]/ sum[i]((j==clusters[i]);

}



reservoir store_data(input float centroids[n][m], parameter string path, parameter string type='csv')
{
    fwrite(centroids, path, type);
}

component main()
{
    flow float train_data[60000][784], centroids[10][784];
    flow int clusters[60000];
    iterations = 100;


    read_data(train_data, 'data/train.csv');
    initialize_centroids(train_data, centroids);

    for (i=0; i<iterations; i= i + 1)
    {
        train_kmeans(clusters, train_data, centroids);
    }

    store_data(centroids, 'data/model.csv');

}
