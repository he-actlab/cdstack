spring read_data(output float x[n][m], parameter string path, parameter string type='csv')
{
    iterator i[0:n-1];
    iterator j[0:m-1];

    lines = fread(path1, type);
    x[i][j] = float(lines[i][j]);

}
component initialize_centroids(input float x[n][m],output float centroids[k][l], parameter int centers=10)
{
    iterator i[0:centers-1];
    iterator j[0:m-1];

    // Assign centroids as the first 10 values in the dataset
    centroids[i][j] = x[i][j];

}
component assignment(input float x[m], state float centroids[centers][m], state centroids_sum[centers][m], state cluster_sizes[centers])
{
    iterator i[i:centers-1];
    iterator j[0:m-1];

    distances[i] = sum[j]((x[j] - centroids[i][j])^2.0)^(0.5);
    cluster = argmin[i](distances[i]);

    new_centroids[cluster][j] = new_centroids[cluster][j] + x[j];
    cluster_sizes[cluster] = cluster_sizes[cluster] + 1;

}
component update_centroids(input float centroid_sums[centers][m], input float cluster_sizes[centers], output new_centroids[centers][m])
{
    iterator i[0:centers-1];
    iterator j[0:m-1];
    new_centroids[i][j] = centroid_sums[i][j]/cluster_sizes[i];
}

reservoir store_data(input float centroids[n][m], parameter string path, parameter string type='csv')
{
    fwrite(centroids, path, type);
}

component main()
{
    flow float train_data[60000][784], centroids[10][784], new_centroids[10][784];
    flow int clusters[60000];
    indexer i[0:59999];
    
    // Initialize cluster sizes and new centroids
    flow int cluster_sizes[10] = 0;
    flow float centroid_sums[10][784] = 0;
    
    // Read training data
    read_data(train_data, 'data/train.csv');
    
    // Naiively initialize centroids
    initialize_centroids(train_data, centroids);
    
    
    assignment[i](train_data[i],centroids,centroid_sums,cluster_sizes);
    update_centroids(centroid_sums, cluster_sizes,new_centroids);
    store_data(new_centroids, 'data/model.csv');

}
